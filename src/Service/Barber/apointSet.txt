import { AppDataSource } from "../../data-source";
import { UserAppointment } from "../../entities/userAppointments";
import { Service as BarberService } from "../../entities/barberService";
import { BarberAvailability } from "../../entities/barberAvailability";
import { User } from "../../entities/users";
import { AppError } from "../../Error/handleErrors";

class AppointmentService {
    async setAppointment(
        userId: number,
        barberId: any,
        serviceId: any
    ) {
        const array = { error: "" };

        try {
            const serviceRepository =
                AppDataSource.getRepository(BarberService);
            const appointmentRepository =
                AppDataSource.getRepository(UserAppointment);
            const availabilityRepository =
                AppDataSource.getRepository(BarberAvailability);
            const userRepository = AppDataSource.getRepository(User);

            const userFind = await userRepository.findOne({
                where: {
                    id: userId,
                },
            });

            if (!userFind) {
                throw new AppError("Ops usuario não encontrado!");
            }
            const barberservice = await serviceRepository.findOne({
                where: {
                    id: serviceId,
                    barbers: barberId,
                },
            });

            if (barberservice) {
                const apDate = `${year}-${month < 10 ? "0" + month : month}-${
                    day < 10 ? "0" + day : day
                } ${hour < 10 ? "0" + hour : hour}:00:00`;
                const apDateTime = new Date(apDate);
                if (Date.parse(apDate) > 0) {
                    const apps = await appointmentRepository.count({
                        where: { barber: barberId, ap_datetime: apDateTime },
                    });

                    if (apps === 0) {
                        const weekday = new Date(apDate).getDay();

                        const avail = await availabilityRepository.findOne({
                            where: { barber: barberId, weekday: weekday },
                        });
                        console.log(avail, "hours barber");

                        if (avail) {
                            const hours = avail.hours.split(",");

                            if (hours.includes(hour + ":00")) {
                                const service = await serviceRepository.findOne(
                                    { where: serviceId }
                                );

                                const newApp = appointmentRepository.create();
                                if (service) {
                                    newApp.service = service;
                                }
                                newApp.user = userFind;
                                newApp.barber = barberId;
                                newApp.service = serviceId;
                                newApp.ap_datetime = apDateTime;
                                console.log(newApp.ap_datetime, "data");
                                console.log(newApp, "createed");
                                await appointmentRepository.save(newApp);
                            } else {
                                array.error =
                                    "Barbeiro não atende neste horário";
                            }
                        } else {
                            array.error = "Barbeiro não atende neste dia.";
                        }
                    } else {
                        array.error =
                            "Barbeiro já possui atendimento neste dia e horário.";
                    }
                } else {
                    array.error = "Data inválida";
                }
            } else {
                array.error = "Serviço inexistente";
            }
        } catch (error) {
            array.error = "Ocorreu um erro ao agendar";
        }

        return array;
    }
}

export default AppointmentService;
